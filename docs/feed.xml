<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="computingkitchen.com/feed.xml" rel="self" type="application/atom+xml" /><link href="computingkitchen.com/" rel="alternate" type="text/html" /><updated>2021-10-12T20:35:25-07:00</updated><id>computingkitchen.com/feed.xml</id><title type="html">Computing Kitchen</title><subtitle>Everyday computational science</subtitle><entry><title type="html">Using R for Research Code</title><link href="computingkitchen.com/2021/10/12/R-for-research.html" rel="alternate" type="text/html" title="Using R for Research Code" /><published>2021-10-12T00:00:00-07:00</published><updated>2021-10-12T00:00:00-07:00</updated><id>computingkitchen.com/2021/10/12/R-for-research</id><content type="html" xml:base="computingkitchen.com/2021/10/12/R-for-research.html">&lt;p&gt;Tips on using R for research code.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A group of researchers at work asked for advice on how to write R code that would work better and last longer. They are all fine at R but don’t have a community of practice from which to understand best-known methods. When I work on research code, I think of packaging, testing, and documentation as a source of psychological safety for my work, so I called my response a &lt;a href=&quot;https://computingkitchen.com/safetyguide/&quot;&gt;Safety Guide for Research with R&lt;/a&gt;.&lt;/p&gt;</content><author><name>adolgert</name></author><summary type="html">Tips on using R for research code.</summary></entry><entry><title type="html">Checkout Testing for Heterogeneous Clusters</title><link href="computingkitchen.com/2020/09/10/checkout-testing.html" rel="alternate" type="text/html" title="Checkout Testing for Heterogeneous Clusters" /><published>2020-09-10T00:00:00-07:00</published><updated>2020-09-10T00:00:00-07:00</updated><id>computingkitchen.com/2020/09/10/checkout-testing</id><content type="html" xml:base="computingkitchen.com/2020/09/10/checkout-testing.html">&lt;p&gt;Checkout testing for code compiled on a different architecture.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The nodes on this cluster have different architectures because they were bought
in small batches. When I compile research code on a node, it sometimes won’t run
on another node. That’s the best case scenario, and the worst is that it will
run but give wrong results.&lt;/p&gt;

&lt;p&gt;If I compile code with full optimization on one node and run on a much older
node, it will sometimes stop with a Unix signal, SIGILL.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Illegal instruction
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That means the compiler inserted a machine code that uses newer chip features,
and they aren’t present on this chip.&lt;/p&gt;

&lt;p&gt;I would find the oldest machine on the cluster and compile there, but
chip features aren’t a march of progress. You can look in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/cpuinfo&lt;/code&gt;
for the flags, which are a rough measure of each chip’s capabilities.
Here’s an &lt;a href=&quot;https://ark.intel.com/content/www/us/en/ark/products/130409/intel-core-i7-8809g-processor-with-radeon-rx-vega-m-gh-graphics-8m-cache-up-to-4-20-ghz.html&quot;&gt;Intel i7-8809G&lt;/a&gt;, model 158, stepping 9.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov
pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb
rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology
nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2
ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt
tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch
cpuid_fault epb invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi
flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms
invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves
dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can avoid the problem by being conservative in our compiler flags.&lt;/p&gt;

&lt;h2 id=&quot;compiling-for-safety&quot;&gt;Compiling for safety&lt;/h2&gt;

&lt;p&gt;It’s tempting to recompile with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O2&lt;/code&gt;, in case that’s safer. The list of optimizations
gcc uses at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O3&lt;/code&gt; isn’t as dangerous as it used to be, and reducing
the optimization level isn’t exactly a direct approach to a problem
with target architecture.&lt;/p&gt;

&lt;p&gt;The most basic target architecture is SSE2, which means choosing both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-march=SSE2 -mcpu=SSE2&lt;/code&gt;.
That restricts the compiler to using features from 2000. That seems like it
would be a bad performance hit. Worse, it would require compiling all the
components at this level. Our toolchains, these days, are huge, and there’s
not easy way to specify the architecture for all of them. I’d have
to go package by package, library by library, looking for how to configure it.&lt;/p&gt;

&lt;h2 id=&quot;silent-faults&quot;&gt;Silent faults&lt;/h2&gt;

&lt;p&gt;The deeper problem is that I’ve seen code that runs on a different architecture
but gives wrong results. I’ve seen this twice in three years, that someone
noticed. I don’t have the code as an example.&lt;/p&gt;

&lt;p&gt;I interpret these two events to indicate that the same machine code,
on two different architectures, can give significantly different results.
In particular, machine code with one architecture target can run
on another and give wrong results without raising an exception.&lt;/p&gt;

&lt;h2 id=&quot;checkout-testing&quot;&gt;Checkout testing&lt;/h2&gt;

&lt;p&gt;Checkout testing examines behavior of a system that’s installed in its
target environment. The term comes from engineering. While acceptance
testing verifies to a client, or user, that the software works, checkout
testing applies &lt;em&gt;in place.&lt;/em&gt; I’m starting to use checkout testing
on this heterogeneous cluster.&lt;/p&gt;

&lt;p&gt;I can’t run the full suite for every job on the cluster. The full
suite serves many other purposes. It does longer runs for randomized
fault searches. It has test-driven design user tests. I need to
pick the checkout test.&lt;/p&gt;

&lt;p&gt;Important architecture changes have advanced multimedia and
floating-point processing. These affect vectorized mathematical
loops, so it’s these that I’ll test, in the absence of evidence
for what causes problems.&lt;/p&gt;

&lt;p&gt;That means I have a new unit testing flag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--checkout&lt;/code&gt;, that
exercises code with high math complexity but skips trying all
possible parameter values. I compile with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O3&lt;/code&gt;, use the
native architecture, and compile another version if the checkout
fails.&lt;/p&gt;</content><author><name>adolgert</name></author><summary type="html">Checkout testing for code compiled on a different architecture.</summary></entry><entry><title type="html">Reading Grid Engine QAcct</title><link href="computingkitchen.com/2020/09/08/sge-qacct.html" rel="alternate" type="text/html" title="Reading Grid Engine QAcct" /><published>2020-09-08T00:00:00-07:00</published><updated>2020-09-08T00:00:00-07:00</updated><id>computingkitchen.com/2020/09/08/sge-qacct</id><content type="html" xml:base="computingkitchen.com/2020/09/08/sge-qacct.html">&lt;p&gt;How to read performance characteristics from grid engine output.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Does anybody use Grid Engine any more? I work with people using Univa Grid Engine. Some folks work with Slurm. This post is a tutorial on how to read the accounting data for a job. It uses a particular job that failed as an example.&lt;/p&gt;

&lt;p&gt;The qacct won’t tell you what’s wrong with the operating system, so it wouldn’t have told you how to fix the problem, but it can offer some pointers to whether the problem is in the application.  That’s a skill that’s available and helpful.&lt;/p&gt;

&lt;p&gt;UGE Qacct gives three performance information about three subsystems: CPU, memory, and Input/Output (I/O). We read these in two ways, an initial health check, and then a deeper dive.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-run&quot;&gt;The problem run&lt;/h2&gt;

&lt;p&gt;The use case here is a run of a job, where sometimes it succeeds and sometimes it fails.
The Qacct output below shows the failed run. It’s edited to remove local information.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;==============================================================
qname        all.q               
hostname     hostname
group        Domain Users        
owner        borlaug             
project      proj_wheat            
department   defaultdepartment   
jobname      MEPS_RX_s2_d440     
jobnumber    55123964            
taskid       6                   
pe_taskid    NONE                
account      sge                 
priority     0                   
cwd          /projects/borlaug/pipeline/scripts
submit_host  hostname
submit_cmd   qsub -cwd -q all.q -l m_mem_free=200G -l fthread=2 -l h_rt=24:00:00 -N MEPS_RX_s2_d440 -P proj_wheat -t 1-6:1 /projects/borlaug/pipeline/run_shell.sh worker.py -x 2 -d 440 -s MEPS_RX
qsub_time    08/31/2020 12:37:59.279
start_time   08/31/2020 12:37:55.967
end_time     08/31/2020 13:04:24.859
granted_pe   NONE                
slots        1                   
failed       0    
deleted_by   NONE
exit_status  137                 
ru_wallclock 1588.892     
ru_utime     68.535       
ru_stime     1259.848     
ru_maxrss    19217024            
ru_ixrss     0                   
ru_ismrss    0                   
ru_idrss     0                   
ru_isrss     0                   
ru_minflt    25683421            
ru_majflt    185                 
ru_nswap     0                   
ru_inblock   839408              
ru_oublock   40                  
ru_msgsnd    0                   
ru_msgrcv    0                   
ru_nsignals  0                   
ru_nvcsw     25505               
ru_nivcsw    29955               
wallclock    1589.132     
cpu          1328.383     
mem          14404.325         
io           0.021             
iow          1.220             
ioops        5362                
maxvmem      24.666G
maxrss       0.000
maxpss       0.000
arid         undefined
jc_name      NONE
bound_cores  NONE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s read this!&lt;/p&gt;

&lt;h2 id=&quot;initial-health-check&quot;&gt;Initial health check&lt;/h2&gt;

&lt;h3 id=&quot;cpu&quot;&gt;CPU&lt;/h3&gt;

&lt;p&gt;For the initial health check on the CPU, we find the percentage of time the process is doing calculations. This percentage is in three metrics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ru_wallclock - The total seconds the process has run, or real-world time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ru_utime - This user time (utime) is the number of seconds that a CPU was running the code you wrote in your script. This counts the time of each thread, so it can be as large as the wallclock time multiplied by the number of threads.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ru_stime - This is system time, and it’s the number of seconds the operating system was working on behalf of the application. That means the application, somewhere under one of the functions you called in Python, Stata, or R, called a function that called the operating system to read a file, write to an internet connection, wait on a signal, or other system service.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a single-threaded process, user time, added to system time, should almost equal the wallclock time. That last time duration is time the application was in line behind some other application, waiting to get scheduled by the CPU. The way our scheduler works, this time should be small. If it’s not under ten percent, something else in the system is hogging it.&lt;/p&gt;

&lt;p&gt;The computational intensity of a process is user time divided by wallclock time. For a single process, this can be 15% to 40%, with a bell curve. If it’s under ten percent, the application isn’t doing well.&lt;/p&gt;

&lt;p&gt;The qacct that you sent has (system time=1260, user time=69, wallclock=1600). That system time is mostly disk access. For a process that doesn’t do much math, (so it reads a file, divides by 10, and writes it), the system time can be as large as the user time. This system time is off the charts, as a fraction of wallclock.&lt;/p&gt;

&lt;h3 id=&quot;memory&quot;&gt;Memory&lt;/h3&gt;

&lt;p&gt;For the initial health check on the memory, we look at the resident set size, which is ru_maxrss. That’s in bytes, for this setup. Because of the ways the operating system attempts to minimize memory use, counting the memory used by a process can be difficult. Much of its memory is shared with other threads or processes. The resident set size and proportional set size (PSS) are attempts to give a good estimate.&lt;/p&gt;

&lt;p&gt;For this qacct, the ru_rss is within the requested memory limits, so that didn’t kill the process. We do see that the memory allocated is significant, though, so the program must have run and done some work. When you want to ask, how much memory should this program use, you generally start with, how big are the data sets, and how many times do I copy them and make changes to those copies? So the large memory number means data probably got read in.&lt;/p&gt;

&lt;h3 id=&quot;io&quot;&gt;I/O&lt;/h3&gt;

&lt;p&gt;Input and output can be to any device, be that a file, the network, or the screen. On this cluster, it’s almost always about files. We look to ru_inblock and ru_outblock for those numbers, but they are also summarized in the summary “io” number at the bottom of qacct. A block is 512 bytes, so you take the number ru_inblock = 839408 blocks, multiply by 512 bytes / block. That gives you bytes, so divide by 1024^3 to get GB. Here, it’s 0.4 GB. Some input was read, but not a lot. It looks like more than the amount needed to read the executable and libraries, but it’s not a lot over that. I’d have to run an experiment to be sure. The experiment would load just libraries and quit.&lt;/p&gt;

&lt;p&gt;Meanwhile, output is 40 blocks, which is 20kb. That’s enough for log files.&lt;/p&gt;

&lt;h3 id=&quot;summary-of-initial-health-check&quot;&gt;Summary of initial health check&lt;/h3&gt;

&lt;p&gt;The application looks like it started and like it started reading input files. It may have allocated memory to store inputs. The time in system could mean it’s waiting on complicated multithreading stuff or networking stuff, but that isn’t in this program, so our default guess is that it was waiting on input files.&lt;/p&gt;

&lt;h2 id=&quot;deeper-dive&quot;&gt;Deeper Dive&lt;/h2&gt;

&lt;h3 id=&quot;cpu-1&quot;&gt;CPU&lt;/h3&gt;

&lt;p&gt;There is a weak CPU metric in the qacct that happens to be helpful here. A computer runs all the programs we ask it to run by switching from one to the next. Each CPU cycles through which programs are active, and each time your application switches out, it’s called a context switch.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ru_nvcsw—The number of voluntary context switches. These are times that the program invites the operating system to switch to another thread, if it wants. You don’t think your program does this, but it’s implied in most calls to the operating system that, if you’re calling the operating system, you’re OK with a context switch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ru_nivcsw—Involuntary context switches happen when the operating system pauses your program’s thread of execution in order to let some other thread have a chance. This can happen when your program is in a tight mathematical loop, but it can also happen when your program is in one of the operating system calls that are marked as non-interruptible. Reading and writing from drives is non-interruptible.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We therefore have a weird read on the involuntary context switch. It either means your code is sailing happily or that it’s locked in reads. For a rule of thumb, the involuntary context switches are usually far less than the voluntary ones. You can get a sense, for your code, by comparing a good run with a bad run. Context switching rates can be all over the board for different types of applications.&lt;/p&gt;

&lt;p&gt;In this particular case, involuntary switches for the failing run are way, way higher. That tells me that it’s locked in reads or writes.&lt;/p&gt;

&lt;p&gt;If further digging might help, you would try:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Run htop when the process starts, and watch it in htop. Run strace through htop by hitting the ‘s’ key to show you the system calls it makes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the Python profiler or set up a https://poormansprofiler.org.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are good starts.&lt;/p&gt;

&lt;h3 id=&quot;memory-1&quot;&gt;Memory&lt;/h3&gt;

&lt;p&gt;First, don’t worry that memory for maxrss and maxpss isn’t always reported. Different operating systems store and report these different ways, and system upgrades can change those. Sometimes they aren’t available through certain retrievals until the application is over. Don’t worry that maxrss and maxpss are zero.&lt;/p&gt;

&lt;p&gt;Meanwhile, maxvmem can be interesting. This is not the total amount of memory your process used. It’s the total amount of memory your process threatened to use. If you have a dataframe, and you make a copy, the operating system creates a section of virtual memory for that copy, but it’s only an IOU for real memory. That IOU only gets called in if your code modifies values in that memory. It’s called copy-on-write. That feature is great for working with dataframes because it greatly increases performance. That kind of table manipulation can lead to very large virtual memory allocations, though. They can be twenty times the real memory the application uses.&lt;/p&gt;

&lt;p&gt;This qacct shows virtual memory is at least fifty times the real memory usage. That’s not a problem. It shows some early allocation happened in the program.&lt;/p&gt;

&lt;p&gt;Digging even deeper, we look at what Qacct calls “faults,” but these aren’t problems. They are computer lingo for a count of how many times the program requested memory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ru_minflt—There is another min fault every time the CPU asks for the next value in cache. All data is read into cache, and the CPU brings bits of it close by, into what are called registers. Reads to cache are happening all the time, and this number will usually be very large, which it is here. Fine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ru_majflt—A major fault is more important. This means that the program used some data in memory, didn’t use it for a little while, and then the operating system took it away for a bit. The major fault is when the application has to ask the operating system for its data back. These happen, and they can add up for programs that live in the background of an operating system, but you won’t see a lot of them in a happy application. Some, but not a lot.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this qacct, 185 is a lot of faults. I’m more sure of that because we have an example of a happy version of the program that has five or so. That’s an indicator the program was hanging around doing nothing the operating system considered useful enough to keep in memory.&lt;/p&gt;

&lt;h3 id=&quot;io-1&quot;&gt;I/O&lt;/h3&gt;

&lt;p&gt;I don’t see more about I/O. It would be great to see how much is to the shared drives, right? That’s hard to get from the operating system, though. It has been more helpful to look at the Qumulo dashboard for activity while the program is running. You can narrow in on a particular directory and get a good sense of activity.&lt;/p&gt;

&lt;h3 id=&quot;deep-dive-summary&quot;&gt;Deep dive summary&lt;/h3&gt;

&lt;p&gt;The deep dive supports the high-level because the page faults are high and involuntary context switches are high. We don’t know why the program isn’t making headway on I/O, but it isn’t.&lt;/p&gt;

&lt;p&gt;There were a bunch of times I couldn’t give you a rule of thumb on how big a number should be. It depends on the application. If you want to learn what’s a good number, occasionally take a look at qacct for a job that ran well. See if the numbers make sense to you, given what you know the program does.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I hope that was fun. I shouldn’t skip the reveal of what actually happened to the program to make it fail intermittently. Our capable infrastructure team figured out quickly that nodes were deteriorating because they ran out of memory associated with cgroups. It looks like they used a technique similar to the one I described here, but applied to the whole system: look at CPU, memory and I/O. Start at the top level and drill down. Fixing that fixed the problem with this application, and that likely fixed many more applications that had been failing on the cluster but weren’t reported, so you did a good deed with detailed reporting.&lt;/p&gt;

&lt;p&gt;The nodes were running out of a dedicated part of memory that’s used to enforce allocation of space to each application. I’m not sure how your application experienced that problem. It could have seen one of two things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A failure for a read() call to return quickly. That would explain the system time and involuntary context switches.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A failure in memory allocation, which is an alloc() call. That would explain why the operating system would kill the application with a SIGKILL, which is a -9 signal, which is an exit status of 137.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m open to suggestions on which of these is more likely. Running the code and starting htop, with strace on, would have answered the question.&lt;/p&gt;</content><author><name>adolgert</name></author><summary type="html">How to read performance characteristics from grid engine output.</summary></entry><entry><title type="html">Stable Calculation of the Mean Age of Death</title><link href="computingkitchen.com/2020/09/02/Mean-Age.html" rel="alternate" type="text/html" title="Stable Calculation of the Mean Age of Death" /><published>2020-09-02T00:00:00-07:00</published><updated>2020-09-02T00:00:00-07:00</updated><id>computingkitchen.com/2020/09/02/Mean-Age</id><content type="html" xml:base="computingkitchen.com/2020/09/02/Mean-Age.html">&lt;p&gt;Correction for how to calculate the mean age of death.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;For demography, actuarial mathematics, or global health, we
often count life events that happen to people within some
time span. Then we analyze the rate at which those events happen.
The mean age is the average time at which events happen,
given that they happen within an interval, and weighted
by the number of individuals remaining.&lt;/p&gt;

&lt;p&gt;The standard calculation for the demographic calculation
of the mean age, for constant mortality, isn’t numerically
stable, and this is a note on how to fix it. Rarely does
the final result of work rely on an assumption that mortality
is constant across an age interval, unless it chooses small
age intervals, but the calculation of mean age is often
used to bootstrap iterative methods or provide a bound
on results.&lt;/p&gt;

&lt;h2 id=&quot;mean-age-for-constant-mortality-rate-blows-up&quot;&gt;Mean age for constant mortality rate blows up&lt;/h2&gt;

&lt;p&gt;When I say mortality rate, I mean hazard rate for events.
Sometimes that’s a mortality rate. Sometimes that’s a
hazard rate for giving birth.&lt;/p&gt;

&lt;p&gt;The mean age for an interval of time that starts at time
\(x\) and ends at time \(x+n\), for hazard rate \(\lambda(t)\),
is the ratio of the expected value of the time over a
normalization by population.&lt;/p&gt;

\[\begin{equation}
  {}_na_x = \frac{\int_x^{x+n}(a-x)\lambda(a)e^{-\int_x^a\lambda(s)ds}}{\int_x^{x+n}\lambda(a)e^{-\int_x^a\lambda(s)ds}}
\end{equation}\]

&lt;p&gt;This mean age is the value within the time interval. When we assume that hazard is constant, \(\lambda(t)=m_x\), this simplifies
considerably to&lt;/p&gt;

\[\begin{equation}
{}_na_x = \frac{1}{m_x}- \frac{n e^{-m_x n}}{1-e^{-m_x n}}
\end{equation}\]

&lt;p&gt;The problem is that \(m_x\) can be near or at zero for some
intervals. The mean age, as \(m_x\) approaches zero, does
converge to \(n / 2\) mathematically, but floating-point
calculation shows lots of crazy values as \(m_x\rightarrow 0\).&lt;/p&gt;

&lt;p&gt;The problem is worse when we evaluate draws from
a distribution of events, because outliers can often be zero.
I see this even for smaller national populations where mortality
rates can be low for 10–15 year-olds.
In particular, there is an iterative method,
called the graduation method, that fails 
some percentage of the time (about one percent for national-level data)
that calculates mortality from mortality rate using this mean
age equation.&lt;/p&gt;

&lt;h2 id=&quot;rewritten-mean-age-is-stable&quot;&gt;Rewritten mean age is stable&lt;/h2&gt;

&lt;p&gt;Given that the limit of the mean age, as \(m_x\rightarrow 0\),
converges to \(n/2\), it should be possible to find a
computation that doesn’t diverge.&lt;/p&gt;

\[\begin{equation}
{}_na_x = \frac{n}{2}\left(1 - \coth(m_x n)) + \frac{1}{m_x n}\right)
\end{equation}\]

&lt;p&gt;Writing the equation this way shows that we need to remove
the infinity from the hyperbolic cotangent. To see this,
look at the series approximation to the hyperbolic cotangent.&lt;/p&gt;

\[\begin{equation}
  \coth x = \frac{1}{x} + \frac{x}{3} - \frac{x^3}{45} + \frac{2x^5}{945}+\cdots
\end{equation}\]

&lt;p&gt;This removal even has a name, the Langevin function.&lt;/p&gt;

\[\begin{equation}
  L(x) = \coth(x) - \frac{1}{x}
\end{equation}\]

&lt;p&gt;We can write the mean age of death for constant mortality
using the Langevin function.&lt;/p&gt;

\[\begin{equation}
{}_na_x = \frac{n}{2}\left(1 - L(m_x n)\right)
\end{equation}\]

&lt;h2 id=&quot;approximating-the-langevin-function&quot;&gt;Approximating the Langevin function&lt;/h2&gt;

&lt;p&gt;If your math library doesn’t implement the Langevin
function, then &lt;em&gt;An Atlas of Functions&lt;/em&gt; has a nice
approximation, in the form of a continued fraction.&lt;/p&gt;

\[\begin{equation}
  L(x)\approx (x/3 / (1 + x^2/15 / (1 + x^2/35 / 1 + x^2/63/(1 + x^2/99\cdots))))
\end{equation}\]

&lt;p&gt;That approximation is really good, but it doesn’t hold
as \(x\) approaches one, so we would use a uniform interpolation
between that and the full value. Call the continued
fraction \(\tilde{L}(x)\). Between a lower value
\(a=1/1000\) and an upper value \(b=1/100\), interpolate.&lt;/p&gt;

\[\begin{eqnarray}
w_1 &amp;amp; = &amp;amp; (x - a) / (b - a) \\
w_2 &amp;amp; = &amp;amp; (b - x) / (b - a) \\
L(x) &amp;amp; =&amp;amp; w_1 \tilde{L}(x) + w_2 (\coth(x) - \frac{1}{x})
\end{eqnarray}\]

&lt;p&gt;With the Langevin function in hand, you can throw
any mortality rate at the mean age equation.&lt;/p&gt;

&lt;h2 id=&quot;bibliography&quot;&gt;Bibliography&lt;/h2&gt;

&lt;p&gt;Spanier, Jerome, and Keith B. Oldham. An Atlas of Functions. New York: Hemisphere publishing corporation, 1987.&lt;/p&gt;</content><author><name>adolgert</name></author><summary type="html">Correction for how to calculate the mean age of death.</summary></entry><entry><title type="html">Modifying testthat Unit Tests for Debugging</title><link href="computingkitchen.com/2020/09/01/R-TestThat-Debug.html" rel="alternate" type="text/html" title="Modifying testthat Unit Tests for Debugging" /><published>2020-09-01T00:00:00-07:00</published><updated>2020-09-01T00:00:00-07:00</updated><id>computingkitchen.com/2020/09/01/R-TestThat-Debug</id><content type="html" xml:base="computingkitchen.com/2020/09/01/R-TestThat-Debug.html">&lt;p&gt;How to call testthat under RStudio in order to debug a unit test.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When I see an error in a unit test, and I need to figure
out how to fix it, I’d like to have all of my tools
available. There is no reason to be stuck with print-statement
debugging.&lt;/p&gt;

&lt;p&gt;This entry shows two techniques: how to add convenience
functions for calling debuggers and how to use editor
breakpoints to trace unit tests.&lt;/p&gt;

&lt;h2 id=&quot;convenience-functions&quot;&gt;Convenience functions&lt;/h2&gt;

&lt;p&gt;My projects always have a directory structure that places
tests for the source file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R/filename.R&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tests/testthat/test-filename.R&lt;/code&gt;. I make it easier to test a single file
by making functions that take &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filename.R&lt;/code&gt; as the argument.&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Place in .Rprofile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_file_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rprojroot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_package_root_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tests&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testthat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_progress&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testthat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# This turns off Hadley's weird unit test messages.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testthat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProgressReporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_praise&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Drop into debug if the test fails.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testthat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebugReporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They also turn off the infantilizing “praise” option.&lt;/p&gt;

&lt;h2 id=&quot;debugging-a-unit-test-interactively&quot;&gt;Debugging a unit test interactively&lt;/h2&gt;

&lt;p&gt;The code above also shows one way to look at stack frames
when a test fails. It calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testthat::test_file&lt;/code&gt; with
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DebugReporter&lt;/code&gt;. This will stop at the failure and
show variables that are defined in a given stack frame.
That’s helpful, but it isn’t as helpful as being able to
use an interactive debugger.&lt;/p&gt;

&lt;p&gt;There are two ways to invoke an interactive debugger from
a unit test. One is to insert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;browser()&lt;/code&gt; commands into the
source code. You will need to execute the function again, or
rebuild the source, in order for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;browser()&lt;/code&gt; command to
be invoked. The trouble with this is that you don’t want to
leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;browser()&lt;/code&gt; commands in the code by accident, and
accidents will happen.&lt;/p&gt;

&lt;p&gt;I’d like to use &lt;a href=&quot;https://support.rstudio.com/hc/en-us/articles/205612627-Debugging-with-RStudio#stopping-on-a-line&quot;&gt;editor breakpoints&lt;/a&gt; instead.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testthat&lt;/code&gt; library &lt;a href=&quot;https://github.com/r-lib/testthat/issues/116&quot;&gt;won’t be able to use editor
breakpoints&lt;/a&gt; because it usually starts a separate session,
outside RStudio, to run its tests.
If we’re willing to relax our requirement that unit tests
run in a pristine environment, then we can run those tests
ourselves.&lt;/p&gt;

&lt;p&gt;In order to run the unit tests ourselves, we need to read
the file with unit tests and run those tests in the local
environment. A quick way to do this&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;test_file_trace&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new.env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_that&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;substitute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_that&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_that&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we want to debug a particular function, we can
set a breakpoint by left-clicking to the left of
the line numbers in RStudio.  Then mark the function
for tracing
with &lt;a href=&quot;https://stat.ethz.ch/R-manual/R-devel/library/base/html/debug.html&quot;&gt;debugonce&lt;/a&gt;. Finally run unit tests in that file
using the code above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_file_trace(filename).&lt;/code&gt; That gives interactive debugging using the browser.&lt;/p&gt;

&lt;p&gt;It’s possible to modify this function further
so that it picks out tests that match a
regular expression.&lt;/p&gt;</content><author><name>adolgert</name></author><summary type="html">How to call testthat under RStudio in order to debug a unit test.</summary></entry><entry><title type="html">Testing for Floating Point Exceptions</title><link href="computingkitchen.com/2020/08/31/FP-exceptions.html" rel="alternate" type="text/html" title="Testing for Floating Point Exceptions" /><published>2020-08-31T00:00:00-07:00</published><updated>2020-08-31T00:00:00-07:00</updated><id>computingkitchen.com/2020/08/31/FP-exceptions</id><content type="html" xml:base="computingkitchen.com/2020/08/31/FP-exceptions.html">&lt;p&gt;Acceptance testing for divide-by-zero behavior.&lt;/p&gt;

&lt;h1 id=&quot;floating-point-isnt-the-real-numbers&quot;&gt;Floating point isn’t the real numbers&lt;/h1&gt;

&lt;p&gt;If you’re used to writing scientific code in a language, then
you know the results of these calculations:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x = sqrt(-2)
y = 1 / 0
z = 2^(-50) / 2^10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are all cases where something goes wrong, to a greater
or lesser extent, and we rely on however our language
of choice behaves.&lt;/p&gt;

&lt;p&gt;The problem is that not all languages give the same
answers for these lines of code, and the same language
can give different answers for different installations
or operating system settings.&lt;/p&gt;

&lt;h1 id=&quot;floating-point-exceptions&quot;&gt;Floating-point exceptions&lt;/h1&gt;

&lt;p&gt;Those lines of code are examples of three of the five
kinds of floating-point exceptions. The CPU will flag
these exceptions when they happen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Invalid operation&lt;/em&gt;—These include \(\sqrt{-2}\) and
\(0 / 0\). If the exception is not caught, they result
in a NaN value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Division by zero&lt;/em&gt;—These result in either an exception
or Inf or -Inf.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Overflow&lt;/em&gt;—When an operation results in a number too large to represent, this can result
either in infinity or the largest representable number, depending on settings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Underflow&lt;/em&gt;—When an operation results in a number that isn’t zero but is too small to
represent, it can result in plus or minus zero, or the smallest representable number, or a
special value called a subnormal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Inexact&lt;/em&gt;—The result can’t be represented exactly with the ieee standard. For example,
\(2.0 / 3.0\). This happens a lot.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An inexact result is hardly unusual, given the binary representation
of floating point, but it is still possible to catch this as an exception.
The floating-point standard, IEEE 754, is designed to be configurable (Overton 2001),
and exceptions raised on the CPU are the first link in a chain.&lt;/p&gt;

&lt;p&gt;When the CPU sets a flag indicating that an exception has
happened, the operating system has to check for that flag
and clear it. The operating system then decides whether to
raise an interrupt.&lt;/p&gt;

&lt;p&gt;Each language, from C++ to Julia, has a runtime that receives
interrupts from the operating system. That runtime then decides
whether to generate a language-level exception or whether to
ignore it.&lt;/p&gt;

&lt;h1 id=&quot;acceptance-testing&quot;&gt;Acceptance testing&lt;/h1&gt;

&lt;p&gt;It used to be important to include tests of floating-point exceptions
in C++ because settings in the operating system or installation could
change behavior. I don’t know to what extent languages are
able to provide stable behavior for divide-by-zero and NaN-generating
calls, but it seems like a good spot for an acceptance test during
installation.&lt;/p&gt;

&lt;h1 id=&quot;bibliography&quot;&gt;Bibliography&lt;/h1&gt;

&lt;p&gt;Overton, Michael L. Numerical computing with IEEE floating point arithmetic. Society for Industrial and Applied Mathematics, 2001.&lt;/p&gt;</content><author><name>adolgert</name></author><summary type="html">Acceptance testing for divide-by-zero behavior.</summary></entry><entry><title type="html">Finite state machines as a design pattern for scientific code</title><link href="computingkitchen.com/2020/08/31/FSM-for-Science.html" rel="alternate" type="text/html" title="Finite state machines as a design pattern for scientific code" /><published>2020-08-31T00:00:00-07:00</published><updated>2020-08-31T00:00:00-07:00</updated><id>computingkitchen.com/2020/08/31/FSM-for-Science</id><content type="html" xml:base="computingkitchen.com/2020/08/31/FSM-for-Science.html">&lt;p&gt;The mathematical definition of a finite state machine is a template for a design.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;We write code all the time that does some sort of time step.
It could be a custom integration for a particular ordinary differential
equation. It could be a stochastic Markov method that carries state
from the last two steps. Every time we write code like this, there
are some parts that are general, such as multiplying a transformation
matrix by a vector, and there are some parts that are particular
to this problem, such as initializing the vector from a single
parameter. Each time we write code like this, we try
to make the code clearer and more useful by finding a structure
that balances the general and the particular.&lt;/p&gt;

&lt;p&gt;Mathematicians use a model of computation called a finite state machine
(FSM) in order to understand how computation, itself works. We can
use this model of computation as a guide to writing all kinds
of time-stepping code. The mathematical background gives some reassurances
about how generally this guide applies, and it offers a way
to decompose a time-stepping function into composable parts
that have recognizable function.&lt;/p&gt;

&lt;p&gt;More importantly, a function written as a FSM will have an 
interface that makes it easy for other code to call.
Our highest goal is to be able to write several simulations
which have different underlying time-stepping algorithms, but
our goal is to still be able to use the same code on top
of them for optimization or parameter tuning.&lt;/p&gt;

&lt;p&gt;There are several definitions of finite state machines. 
I’ll present two versions here, one common version, called the
Moore machine, and one less common, called a machine in a
category (Arbib and Manes 1974).&lt;/p&gt;

&lt;h1 id=&quot;moore-model&quot;&gt;Moore model&lt;/h1&gt;

&lt;p&gt;The Moore model is a sequential machine that has five parts.
Some of the five parts are data and some are functions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;State&lt;/em&gt;—When we think of a FSM, we think of the state, \(Q\), as being a known set of
  internal states.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Input Token&lt;/em&gt;—Every time step, we feed some data to the
  finite state machine. We call each new value $x$, and each \(x\) is from
  the class \(X_0\) of allowed inputs. It’s the domain of the FSM.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Output Token&lt;/em&gt;—The output of the FSM is a value \(y\) from the class \(Y\)
  of possible outputs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Dynamics&lt;/em&gt;—The heart of a FSM is a function that
  transforms the state and an input token into a new state.
  As an equation, it’s \(\delta: Q \times X_0\rightarrow Q\).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Output function&lt;/em&gt;—The output function is equivalent to an
  observer pattern. It transforms the state and the input into the output,
  \(\lambda:Q\times X_0\rightarrow Y\).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also an initial state that’s part of the machine.&lt;/p&gt;

&lt;p&gt;From this, we can see a software design pattern that suggests the following
structure.&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dynamics&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm_output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm_step&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a little weird, from a software perspective, that the Moore machine
calculates output of the FSM separately from calculating the next
state. There is another version of this called the Mealy machine
that doesn’t have this behavior. People who work in linear control
have reasons for this structure, and I default to trusting them, in
the absence of further research.&lt;/p&gt;

&lt;p&gt;This pattern implicitly organizes a time-stepping algorithm into
input, output, state, dynamics, and observer. That, itself, is
useful for clarifying when two time-stepping algorithms have the
same dynamics, but different observers. It can also force the author
to clarify what all of the inputs are. For instance, the random
number generator can be considered part of the state, or each
set of random numbers can be considered part of the input.&lt;/p&gt;

&lt;h1 id=&quot;machines-in-a-category&quot;&gt;Machines in a category&lt;/h1&gt;

&lt;p&gt;A paper by Arbib and Manes asks how to write a FSM such that it will
be possible to express not just linear control problems but also
stochastic automata and tree automata (Arbib and Manes 1974). They want to unify the interface
to these types so that it’s possible to write an inverse problem on
top of them. An inverse problem asks which inputs would lead
to a given set of outputs. It’s an example of a higher-level function
that would reuse a time-stepping function, if that function had
the right interface.&lt;/p&gt;

&lt;p&gt;They suggest a generalization of the Moore model described above.
Instead of thinking of the input to the \fsm as a set of tokens
$x$ from $X_0$, they suggest thinking of the input as a set of
transformations which take $Q \rightarrow Q\times X_0$. In other
words, you don’t pass in data. You pass in something that transforms
the internal state of the \fsm into a new internal state.&lt;/p&gt;

&lt;p&gt;The machine in a category has seven parts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;State&lt;/em&gt;—This is the same state, \(Q\).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Input process&lt;/em&gt;—Each input to the FSM is a functor, \(X\),
  that transforms \(X:Q\rightarrow Q\times X\).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Output token&lt;/em&gt;—Still a token \(y\) from \(Y\).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Dynamics&lt;/em&gt;—The dynamics now acts on the state, \(Q\),
  not the state and a new token.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Initial state object&lt;/em&gt;—The initial state object is any
  representation of the state, but it has help from the next in the list.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Initial state process&lt;/em&gt;—Like the input process, the initial state
  is a function that transform the initial state object into a valid
  internal state, \(Q\).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Output token&lt;/em&gt;—This is a value \(y\) in the class \(Y\).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Output process&lt;/em&gt;—This observer transforms the state into
  an output token, \(\beta:Q\rightarrow Y\). It doesn’t take the input
  token as an argument.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list is similar to the Moore machine above, but it gives us more
ways to differentiate among time-stepping algorithms. The input process
can be, for code, a strategy pattern that accepts different kinds of inputs,
as long as they can be combined with the FSM state, \(Q\). The initial
state object could be some simple parameterization which the initial state
process turns into a state, \(Q\). That makes the initial state process
a builder pattern.&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dynamics&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm_output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_token&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm_step&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This design pattern is a central structure for time-stepping
algorithms. It separates the more pure math of the dynamics
from translations of input and output parameters and data.&lt;/p&gt;</content><author><name>adolgert</name></author><summary type="html">The mathematical definition of a finite state machine is a template for a design.</summary></entry></feed>